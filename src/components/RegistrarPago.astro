---
interface Props {
  propertyId: string;
  date: string;
  paymentId?: string;
  montoDefault?: number;
}

const { propertyId, date, paymentId, montoDefault } = Astro.props;
---

<div
  id="modalRegistrarPago"
  class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center"
>
  <div class="bg-white rounded-lg p-6 w-full max-w-md">
    <div class="flex justify-between items-center mb-4">
      <h2 class="text-2xl font-bold">
        {paymentId ? "Editar Pago" : "Registrar Pago"}
      </h2>
      <button id="btnCerrarModal" class="text-gray-500 hover:text-gray-700">
        <svg
          class="size-6"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
    <form id="formRegistrarPago" class="space-y-4">
      <input
        type="hidden"
        id="inputPropertyId"
        name="propertyId"
        value={propertyId}
      />
      <input
        type="hidden"
        id="inputPaymentId"
        name="paymentId"
        value={paymentId || ""}
      />
      <div>
        <label class="block text-sm font-medium text-gray-700">Fecha</label>
        <input
          type="date"
          name="fecha"
          value={date}
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
        />
      </div>
      <div>
        <label class="block text-sm font-medium text-gray-700">Monto</label>
        <input
          type="number"
          name="monto"
          step="0.01"
          required
          value={montoDefault}
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
        />
      </div>
      <div>
        <label class="block text-sm font-medium text-gray-700"
          >Observaciones</label
        >
        <textarea
          name="observaciones"
          rows="3"
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
        ></textarea>
      </div>
      <div class="flex justify-end space-x-3">
        <button
          type="button"
          id="btnCancelar"
          class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
        >
          Cancelar
        </button>
        {
          paymentId && (
            <button
              type="button"
              id="btnEliminar"
              class="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600"
            >
              Eliminar
            </button>
          )
        }
        <button
          type="submit"
          class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
        >
          {paymentId ? "Actualizar" : "Guardar"}
        </button>
      </div>
    </form>
  </div>
</div>

<script>
  import {
    createPayment,
    updatePayment,
    deletePayment,
    getPaymentById,
  } from "../lib/payments.ts";
  import type { PaymentFormData } from "../types/paymentTypes.ts";

  const modal = document.getElementById("modalRegistrarPago");
  const btnCerrarModal = document.getElementById("btnCerrarModal");
  const btnCancelar = document.getElementById("btnCancelar");
  const btnEliminar = document.getElementById("btnEliminar");
  const form = document.getElementById("formRegistrarPago") as HTMLFormElement;
  const inputPaymentId = document.getElementById(
    "inputPaymentId"
  ) as HTMLInputElement;

  function cerrarModal() {
    if (modal) {
      modal.classList.add("hidden");
    }
  }

  async function cargarDatosPago() {
    const paymentId = inputPaymentId?.value;
    if (paymentId) {
      try {
        const pago = await getPaymentById(paymentId);
        if (pago) {
          const montoInput = form.querySelector(
            'input[name="monto"]'
          ) as HTMLInputElement;
          const observacionesInput = form.querySelector(
            'textarea[name="observaciones"]'
          ) as HTMLTextAreaElement;
          const fechaInput = form.querySelector(
            'input[name="fecha"]'
          ) as HTMLInputElement;

          if (montoInput) montoInput.value = pago.amount.toString();
          if (observacionesInput)
            observacionesInput.value = pago.observations || "";
          if (fechaInput) fechaInput.value = pago.date;
        }
      } catch (error) {
        console.error("Error al cargar datos del pago:", error);
        alert("No se pudieron cargar los datos del pago.");
      }
    }
  }

  // Cargar datos solo si hay un paymentId
  if (inputPaymentId && inputPaymentId.value) {
    cargarDatosPago();
  }

  // Event listeners
  if (btnCerrarModal) {
    btnCerrarModal.addEventListener("click", cerrarModal);
  }

  if (btnCancelar) {
    btnCancelar.addEventListener("click", cerrarModal);
  }

  if (btnEliminar) {
    btnEliminar.addEventListener("click", async () => {
      if (
        confirm(
          "¿Está seguro de que desea eliminar este pago? Esta acción no se puede deshacer y se perderá permanentemente el registro del pago."
        )
      ) {
        const paymentId = inputPaymentId?.value;
        if (paymentId) {
          try {
            if (modal) {
              modal.classList.add(
                "opacity-0",
                "transition-opacity",
                "duration-300"
              );
            }

            setTimeout(async () => {
              await deletePayment(paymentId);
              cerrarModal();
              window.location.reload();
            }, 300);
          } catch (error) {
            console.error("Error al eliminar el pago:", error);
            alert("Error al eliminar el pago. Por favor, intente nuevamente.");
          }
        }
      }
    });
  }

  if (form) {
    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      const formData = new FormData(form);
      const data: PaymentFormData = {
        propertyId: formData.get("propertyId") as string,
        date: formData.get("fecha") as string,
        amount: parseFloat(formData.get("monto") as string),
        observations: formData.get("observaciones") as string,
      };

      try {
        const paymentId = formData.get("paymentId") as string;

        if (modal) {
          modal.classList.add("opacity-50");
        }

        if (paymentId) {
          await updatePayment(paymentId, data);
        } else {
          await createPayment(data);
        }

        cerrarModal();
        window.location.reload();
      } catch (error) {
        console.error("Error al registrar el pago:", error);

        // Mostrar mensaje de error más específico
        let errorMessage =
          "Error al registrar el pago. Por favor, intente nuevamente.";
        if (error instanceof Error) {
          errorMessage = error.message || errorMessage;
        }

        alert(errorMessage);

        if (modal) {
          modal.classList.remove("opacity-50");
        }
      }
    });
  }
</script>
