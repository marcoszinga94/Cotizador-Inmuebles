---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Depuración - Argensador">
  <div class="container mx-auto p-6">
    <h1 class="text-2xl font-bold mb-6">Página de Depuración</h1>

    <div class="bg-white p-6 rounded-lg shadow-md mb-6">
      <h2 class="text-xl font-semibold mb-4">Variables de Entorno</h2>
      <div id="env-vars" class="bg-gray-100 p-4 rounded overflow-auto max-h-60">
        <p>Cargando variables de entorno...</p>
      </div>
    </div>

    <div class="bg-white p-6 rounded-lg shadow-md mb-6">
      <h2 class="text-xl font-semibold mb-4">Estado de Firebase</h2>
      <div
        id="firebase-status"
        class="bg-gray-100 p-4 rounded overflow-auto max-h-60"
      >
        <p>Verificando estado de Firebase...</p>
      </div>
    </div>

    <div class="bg-white p-6 rounded-lg shadow-md mb-6">
      <h2 class="text-xl font-semibold mb-4">Prueba de Autenticación</h2>
      <div id="auth-test" class="mb-4">
        <button
          id="test-auth-btn"
          class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded"
        >
          Probar Autenticación
        </button>
      </div>
      <div
        id="auth-result"
        class="bg-gray-100 p-4 rounded overflow-auto max-h-60"
      >
        <p>Haga clic para probar la autenticación</p>
      </div>
    </div>

    <div class="bg-white p-6 rounded-lg shadow-md">
      <h2 class="text-xl font-semibold mb-4">Información del Navegador</h2>
      <div
        id="browser-info"
        class="bg-gray-100 p-4 rounded overflow-auto max-h-60"
      >
        <p>Cargando información del navegador...</p>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Función para mostrar las variables de entorno públicas
  function showEnvVars() {
    const envVarsDiv = document.getElementById("env-vars");
    if (!envVarsDiv) return;

    try {
      const envVars = {
        PUBLIC_FIREBASE_API_KEY: import.meta.env.PUBLIC_FIREBASE_API_KEY
          ? "✅ Definido"
          : "❌ No definido",
        PUBLIC_FIREBASE_AUTH_DOMAIN: import.meta.env.PUBLIC_FIREBASE_AUTH_DOMAIN
          ? "✅ Definido"
          : "❌ No definido",
        PUBLIC_FIREBASE_PROJECT_ID: import.meta.env.PUBLIC_FIREBASE_PROJECT_ID
          ? "✅ Definido"
          : "❌ No definido",
        PUBLIC_FIREBASE_STORAGE_BUCKET: import.meta.env
          .PUBLIC_FIREBASE_STORAGE_BUCKET
          ? "✅ Definido"
          : "❌ No definido",
        PUBLIC_FIREBASE_MESSAGING_SENDER_ID: import.meta.env
          .PUBLIC_FIREBASE_MESSAGING_SENDER_ID
          ? "✅ Definido"
          : "❌ No definido",
        PUBLIC_FIREBASE_APP_ID: import.meta.env.PUBLIC_FIREBASE_APP_ID
          ? "✅ Definido"
          : "❌ No definido",
        PUBLIC_FIREBASE_MEASUREMENT_ID: import.meta.env
          .PUBLIC_FIREBASE_MEASUREMENT_ID
          ? "✅ Definido"
          : "❌ No definido",
        PROD: import.meta.env.PROD ? "✅" : "❌",
        DEV: import.meta.env.DEV ? "✅" : "❌",
      };

      let html = '<ul class="list-disc pl-5">';
      for (const [key, value] of Object.entries(envVars)) {
        html += `<li><strong>${key}:</strong> ${value}</li>`;
      }
      html += "</ul>";

      envVarsDiv.innerHTML = html;
    } catch (error: any) {
      envVarsDiv.innerHTML = `<p class="text-red-500">Error al obtener variables de entorno: ${error.message}</p>`;
    }
  }

  // Función para verificar el estado de Firebase
  async function checkFirebaseStatus() {
    const firebaseStatusDiv = document.getElementById("firebase-status");
    if (!firebaseStatusDiv) return;

    try {
      // Importar dinámicamente Firebase
      const firebaseApp = await import("firebase/app");
      const firebaseAuth = await import("firebase/auth");

      const initializeApp =
        firebaseApp.default.initializeApp || firebaseApp.initializeApp;
      const getAuth = firebaseAuth.default.getAuth || firebaseAuth.getAuth;

      // Configuración de Firebase
      const firebaseConfig = {
        apiKey: import.meta.env.PUBLIC_FIREBASE_API_KEY,
        authDomain: import.meta.env.PUBLIC_FIREBASE_AUTH_DOMAIN,
        projectId: import.meta.env.PUBLIC_FIREBASE_PROJECT_ID,
        storageBucket: import.meta.env.PUBLIC_FIREBASE_STORAGE_BUCKET,
        messagingSenderId: import.meta.env.PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
        appId: import.meta.env.PUBLIC_FIREBASE_APP_ID,
        measurementId: import.meta.env.PUBLIC_FIREBASE_MEASUREMENT_ID,
      };

      // Verificar si las claves necesarias están presentes
      const missingKeys = Object.entries(firebaseConfig)
        .filter(([key, value]) => !value && key !== "measurementId")
        .map(([key]) => key);

      if (missingKeys.length > 0) {
        firebaseStatusDiv.innerHTML = `
          <p class="text-red-500">❌ Faltan claves de configuración: ${missingKeys.join(", ")}</p>
        `;
        return;
      }

      // Intentar inicializar Firebase
      try {
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);

        firebaseStatusDiv.innerHTML = `
          <p class="text-green-500">✅ Firebase inicializado correctamente</p>
          <p><strong>App name:</strong> ${app.name}</p>
          <p><strong>Auth instance:</strong> ${auth ? "✅ Disponible" : "❌ No disponible"}</p>
        `;
      } catch (error: any) {
        firebaseStatusDiv.innerHTML = `
          <p class="text-red-500">❌ Error al inicializar Firebase: ${error.message}</p>
          <pre class="text-xs mt-2">${JSON.stringify(error, null, 2)}</pre>
        `;
      }
    } catch (error: any) {
      firebaseStatusDiv.innerHTML = `<p class="text-red-500">Error al cargar Firebase: ${error.message}</p>`;
    }
  }

  // Función para probar la autenticación
  async function setupAuthTest() {
    const testAuthBtn = document.getElementById("test-auth-btn");
    const authResultDiv = document.getElementById("auth-result");
    if (!testAuthBtn || !authResultDiv) return;

    testAuthBtn.addEventListener("click", async () => {
      authResultDiv.innerHTML = "<p>Probando autenticación...</p>";

      try {
        // Importar dinámicamente Firebase
        const firebaseApp = await import("firebase/app");
        const firebaseAuth = await import("firebase/auth");

        const initializeApp =
          firebaseApp.default.initializeApp || firebaseApp.initializeApp;
        const getAuth = firebaseAuth.default.getAuth || firebaseAuth.getAuth;
        const signInWithPopup =
          firebaseAuth.default.signInWithPopup || firebaseAuth.signInWithPopup;
        const GoogleAuthProvider =
          firebaseAuth.default.GoogleAuthProvider ||
          firebaseAuth.GoogleAuthProvider;

        // Configuración de Firebase
        const firebaseConfig = {
          apiKey: import.meta.env.PUBLIC_FIREBASE_API_KEY,
          authDomain: import.meta.env.PUBLIC_FIREBASE_AUTH_DOMAIN,
          projectId: import.meta.env.PUBLIC_FIREBASE_PROJECT_ID,
          storageBucket: import.meta.env.PUBLIC_FIREBASE_STORAGE_BUCKET,
          messagingSenderId: import.meta.env
            .PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
          appId: import.meta.env.PUBLIC_FIREBASE_APP_ID,
          measurementId: import.meta.env.PUBLIC_FIREBASE_MEASUREMENT_ID,
        };

        // Inicializar Firebase
        const app = initializeApp(firebaseConfig, "auth-test");
        const auth = getAuth(app);
        const provider = new GoogleAuthProvider();

        try {
          const result = await signInWithPopup(auth, provider);
          authResultDiv.innerHTML = `
            <p class="text-green-500">✅ Autenticación exitosa</p>
            <p><strong>Usuario:</strong> ${result.user.displayName}</p>
            <p><strong>Email:</strong> ${result.user.email}</p>
          `;
        } catch (error: any) {
          authResultDiv.innerHTML = `
            <p class="text-red-500">❌ Error de autenticación: ${error.message}</p>
            <p><strong>Código:</strong> ${error.code || "N/A"}</p>
            <pre class="text-xs mt-2">${JSON.stringify(error, null, 2)}</pre>
          `;
        }
      } catch (error: any) {
        authResultDiv.innerHTML = `<p class="text-red-500">Error al cargar Firebase: ${error.message}</p>`;
      }
    });
  }

  // Función para mostrar información del navegador
  function showBrowserInfo() {
    const browserInfoDiv = document.getElementById("browser-info");
    if (!browserInfoDiv) return;

    try {
      const info = {
        "User Agent": navigator.userAgent,
        Plataforma: navigator.platform,
        "Cookies Habilitadas": navigator.cookieEnabled ? "Sí" : "No",
        "Ventana Emergente Bloqueada": window.opener ? "No" : "Posiblemente",
        "Ancho de Ventana": window.innerWidth,
        "Alto de Ventana": window.innerHeight,
        Protocolo: window.location.protocol,
        Dominio: window.location.hostname,
        "URL Completa": window.location.href,
      };

      let html = '<ul class="list-disc pl-5">';
      for (const [key, value] of Object.entries(info)) {
        html += `<li><strong>${key}:</strong> ${value}</li>`;
      }
      html += "</ul>";

      browserInfoDiv.innerHTML = html;
    } catch (error: any) {
      browserInfoDiv.innerHTML = `<p class="text-red-500">Error al obtener información del navegador: ${error.message}</p>`;
    }
  }

  // Ejecutar todas las funciones cuando el DOM esté listo
  document.addEventListener("DOMContentLoaded", () => {
    showEnvVars();
    checkFirebaseStatus();
    setupAuthTest();
    showBrowserInfo();
  });
</script>
